			+--------------------+
			| CS 140             |
			| PROJECT 1: THREADS |
			| DESIGN DOCUMENT    |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jaimeen Ahn <jahn5@buffalo.edu>
Christopher Pei <capei208@gmail.com>, <capei@buffalo.edu>
Taiga Ishida <taigaish@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/*

thread.h
-------------

First we create a variable to hold a sleep tick count, which will denote how long the thread shall sleep
before being woken-up/unblocked:

int sleep_ticks;

We create a variable to act as our container for holding a list of sleeping threads:

struct list sleeping_threads;

thread.c
-------------

We create a new field within the thread struct/TCB that holds a reason for why a thread is blocked; we'll call
it "enum thread_block_reason":

enum thread_block_reason{

	BLOCK_REASON_SLEEP = 0,
	BLOCK_REASON_OTHER,
};

The existing "thread_status" enum will indicate whenever the thread is blocked while its value is THREAD_BLOCKED.



*/

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

/*

In our new timer_sleep implementation, we prepare the currently-executing thread to go to sleep by
first setting the thread_status to THREAD_BLOCKED and then setting the reason for the thread block
to BLOCK_REASON_SLEEPING. We then specify the sleep time of the thread to be equal to the value of
"ticks", which must be greater than 0, and then supply a pointer to the thread into our container
of sleeping threads.

In our new timer_interrupt implementation, we prepare by continually/repeatedly fetching the first item
in our container of sleeping threads (which, by design, will be the the thread that is to be unblocked next,
if any), check said thread's tick value and compare it to our global tick count, and remove the delete the thread
from the container of sleeping threads and unblock it if and only if its tick value is less than or equal to the
global tick count. The aforementioned process is repeated until either the fetched thread's tick count (from our
sleep container) is greater than our global tick count, or, our container of sleeping threads is empty. Finally,
once we have a thread who's tick count is greater than our global tick count (or our sleeping thread list was either
empty or emptied), we check once more if the current thread still has the highest priority, compared to any other
threads that may have been unblocked.


*/

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

/*

The scheduling scheme we have devised involves storing all threads that are to sleep in a container
and sorting them by their desired sleep time, from shortest to longest. From there, the scheduler
can select the next thread to run which has the shortest sleep time, by checking the first element of
the container. By contrast, if the container is empty, no threads are sleeping and waiting to be woken
up. By this design, the time_interrupt handler traverses a container containing only sleeping threads,
and needs only to check one item (which is the first) in the list, making it an operation computable
in O(1) time.

*/

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

/*

Prior to any critical sections in our design, such as our container of sleeping threads, interrupts are
to be disabled so as to prevent such race conditions.

*/

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

/*

Within the timer_sleep method, we will be disabling interrupts immediately prior to all critical sections,
such as the timer_sleep() call. And since interrupts are disabled, it is not possible for any other interrupt
to take place.

*/

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

/*

Taking into account discussions from lectures and recitations, we decided that this design seemed to be the
simplest yet most efficient way for this task, as any distant other possibilities that we could think of seemed
to be less efficient overall.

*/

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/*

For our priority scheduling implementation, which must handle priority donation for threads and locks, we will
have to keep track of several pieces of information, including start/original priorities, donations, inherited
priorities, and a lock to keep track of any applicable lock that the thread may or may not be waiting on.

thread.h
-------------

int priority;				/* Start/original priority of the thread. */
struct list donations;			/* Locks this thread has that others are waiting for. */
struct list inherited_priorities;	/* Priorities inherited from donations. */
struct lock *l;				/* Pointer to the lock that thread is waiting on (null if none). */

*/

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

/*

To solve priority inversion, we will use a skill called priority donation.

We declare the linked list donations to track priority donation.
If there is threads with low priority([low]) holds the lock to execute higher one.
The status of donations will change NULL to [low].
Donations : [low] (High) -> NULL
After that threads with middle priority([mid]) needs priority donation.
Then the head of list will be changed to the [mid] and the tail of [mid] points [low]
Donations : [mid] (High) -> [low] (High) -> NULL

When the necessary of threads with lower priority is done, we can erase them in the list.
then the donaitons will be changed like this.
Donations : [low] -> NULL

The reason why we choose the linked list to track priority is it is easy to insert, delete, and sort.


*/

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

/*
The way that makes sure the highest priority thread comes first is that puts the threads in ready_list with order.
Also, we should wake the thread with the highest priority up which in waiting list.
While waiting in the list, we have to consider about some possibilities to change priority of threads.
Prior to switching to waiting, we should make the order by defining new funtion about the comparing priorities.
By using a function named list_insert_ordered() which is in lib/list.h, we can put threads in waiting list with particular order.

*/

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

/*

First, if there is no holder for lock, the current thread becomes a new holder for lock.

Second, if the priority of thread in waiting on a lock is bigger than the lock holder's
priority donation will occur. The priority of lock holder's = the priority of thread in waiting list temporarily.
Then, put original priority to the list inherited_priorities.
The thread on waiting becomes new holder of lock, and the process run recurssively until the priority donation is no need to be happended.


*/

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

/*

First, We will remove the lock on the list of elements which is locked. 
Second, get the priority of the removed thread from the list named inherited_priorities which we declared.
After recovering the original priority of thread, erase it from inherited_priorities.
Then we should find the highest priority in the donations after removing current thread.
The highest priority gets the lock.


*/

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

/*

While priority donation occured, we have to change the priority of threads by using thread_set_priority() which the interrupt might happens.
If we change it everytime when the priority donation occurs, the changed priority might turn out to be useless.
So, to avoid this circumstance, we should calculate all of possible priority of threads which is expected to be part of priority donation.
Using the maxium priority from result of calculating can aviod the race.


*/

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

/*


Before priority donation, the object of priority scheduling is to execute threads with priority order.
Therefore, we cannot help finding the highest priority in waiting list to acheive goal of this scheduling.
Even in priority donation, finding the highest priority is virtual after releasing the lock.
That is why we choose this design, the linked list, because it is easy to sort.
Comparing it with stack and queue, they are also easy to add/drop in regular sequence but they are hard to sort by priority levels.

*/
			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/*

Inside thread.h we decided to add variables within the thread struct to help with advanced scheduling

int nice; this will store the nice value of a thread

int recent_cpu; this will store the recent cpu value of a thread

Inside thread.c we added a global variable for load_avg which stores the load avg of a thread. 

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0      0   0   0  63  61  59   A
 4      4   0   0  62  61  59   A
 8      8   0   0  61  61  59   B
12      8   4   0  61  60  59   A
16      12  4   0  60  60  59   B
20      12  8   0  60  59  59   A
24      16  8   0  59  59  59   C
28      16  8   4  59  59  58   B
32      16  12  4  59  58  58   A
36      20  12  4  58  58  58   C

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

/*

Yes, you could not tell which process goes first if multiple threads have equal priority. 
We ran the threads using round robin scheduling to fix this.


*/

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

/*

If most of the computation is done within the interrupt handler it could slow down performance.



*/

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

/*

Advantages - easy implementation since we are using linked lists.

Disadvatanges - it might be slower since we are using linkedlist instead of other
more faster datatypes.

*/

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

/*

We decided to make a separate file that hosts the formulas given to us in the documents. 

*/


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

